language core;
extend with #sum-types ;
extend with #pairs ;

fn g(x : Nat + (Bool + (fn(Nat) -> Nat))) -> Nat {
  return match x {
      inl(n) => succ(n)
    | inr(bf) => match {succ(0), 0} {
          inr(f) => f(f(succ(0)))
        | inl(b) => if b then succ(0) else 0
      }
  }
}

fn main(x : Nat) -> Nat {
  return g(inr(inr(fn(n : Nat) { return g(inl(n)) })))
}
