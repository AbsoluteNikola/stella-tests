language core;
extend with #variants;
extend with #type-ascriptions;

fn g(x : <| number : Nat, boolean : Bool, function : fn(Nat) -> Nat |>) -> Nat {
  return match  <| value = n |> {
      <| number   = n |> => succ(n)
    | <| boolean  = b |> => if b then succ(0) else 0
    | <| function = f |> => f(f(succ(0)))
  }
}

fn main(x : Nat) -> Nat {
  return g(<| function = fn(n : Nat) {
      return g(<| number = n |>
        as <| number : Nat, boolean : Bool, function : fn(Nat) -> Nat |>) }
  |> as <| number : Nat, boolean : Bool, function : fn(Nat) -> Nat |>)
}
